// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sjVjhDwAwAnzPPjTJm6wuM
// Component: 2z-AxOM-C3amzu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import TextInput2 from "../../TextInput2"; // plasmic-import: gsFwieph5Oti3_/component
import Button2 from "../../Button2"; // plasmic-import: RvR1m9J07KZeiI/component
import IconLink from "../../IconLink"; // plasmic-import: LBPMiNjNaA93E5/component

import { useScreenVariants as useScreenVariantspCqVwGHbhXBxmj } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: pCQVwGHbhXBxmj/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_azure_landing_page_project.module.css"; // plasmic-import: sjVjhDwAwAnzPPjTJm6wuM/projectcss
import sty from "./PlasmicFooter.module.css"; // plasmic-import: 2z-AxOM-C3amzu/css

import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: 84ySjCGX-z1X_P/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: esL-uIx5dqaSMo/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 42-0lsJM221u2m/icon
import TwitterIconIcon from "./icons/PlasmicIcon__TwitterIcon"; // plasmic-import: 6E0DD-0IRv50Gh/icon
import GithubIconIcon from "./icons/PlasmicIcon__GithubIcon"; // plasmic-import: nIQZpWDwYtcGUP/icon
import FacebookIconIcon from "./icons/PlasmicIcon__FacebookIcon"; // plasmic-import: Q-1wMdW2K9OR5W/icon

export type PlasmicFooter__VariantMembers = {};

export type PlasmicFooter__VariantsArgs = {};
type VariantPropType = keyof PlasmicFooter__VariantsArgs;
export const PlasmicFooter__VariantProps = new Array<VariantPropType>();

export type PlasmicFooter__ArgsType = {};
type ArgPropType = keyof PlasmicFooter__ArgsType;
export const PlasmicFooter__ArgProps = new Array<ArgPropType>();

export type PlasmicFooter__OverridesType = {
  root?: p.Flex<"div">;
  httpswwwfathymcom?: p.Flex<"a"> & Partial<LinkProps>;
  httpswwwiotEnsemblecom?: p.Flex<"a"> & Partial<LinkProps>;
  httpswwwhabistackcom?: p.Flex<"a"> & Partial<LinkProps>;
  httpswwwproadjectcom?: p.Flex<"a"> & Partial<LinkProps>;
  httpswwwfathymcomdocs?: p.Flex<"a"> & Partial<LinkProps>;
  httpswwwfathymcomblog?: p.Flex<"a"> & Partial<LinkProps>;
  mailtosupportfathymcom?: p.Flex<"a"> & Partial<LinkProps>;
  enterpriseAgreement?: p.Flex<"a"> & Partial<LinkProps>;
  termsOfService?: p.Flex<"a"> & Partial<LinkProps>;
  privacyPolicy?: p.Flex<"a"> & Partial<LinkProps>;
  textInput2?: p.Flex<typeof TextInput2>;
  button2?: p.Flex<typeof Button2>;
  fathymIt?: p.Flex<typeof IconLink>;
  httpstwittercomFathymIt?: p.Flex<"svg">;
  httpsgithubcomfathym?: p.Flex<typeof IconLink>;
  gitHub?: p.Flex<"svg">;
  httpswwwfacebookcomFathymInc?: p.Flex<typeof IconLink>;
  facebook?: p.Flex<"svg">;
};

export interface DefaultFooterProps {
  className?: string;
}

function PlasmicFooter__RenderFunc(props: {
  variants: PlasmicFooter__VariantsArgs;
  args: PlasmicFooter__ArgsType;
  overrides: PlasmicFooter__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspCqVwGHbhXBxmj()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__zcCrT)} />

      <p.PlasmicImg
        alt={"" as const}
        className={classNames(sty.img__lkSpS)}
        displayHeight={"185px" as const}
        displayMaxHeight={"75px" as const}
        displayMaxWidth={"75%" as const}
        displayMinHeight={"0" as const}
        displayMinWidth={"0" as const}
        displayWidth={"auto" as const}
        loading={"lazy" as const}
        src={{
          src: "/plasmic/azure_landing_page_project/images/fathymLogoAqua01400Pxlspng.png",
          fullWidth: 400,
          fullHeight: 129,
          aspectRatio: undefined
        }}
      />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox___21QnF)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox___1NtDs)}
        >
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__rXcMi)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__rKSfq
              )}
            >
              {"Products"}
            </div>

            <p.PlasmicLink
              data-plasmic-name={"httpswwwfathymcom"}
              data-plasmic-override={overrides.httpswwwfathymcom}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.httpswwwfathymcom
              )}
              component={Link}
              href={
                hasVariant(globalVariants, "screen", "mobileOnly")
                  ? ("https://www.fathym.com/" as const)
                  : undefined
              }
              platform={"nextjs"}
              target={"_blank" as const}
            >
              {"Fathym Platform"}
            </p.PlasmicLink>

            <p.PlasmicLink
              data-plasmic-name={"httpswwwiotEnsemblecom"}
              data-plasmic-override={overrides.httpswwwiotEnsemblecom}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.httpswwwiotEnsemblecom
              )}
              component={Link}
              href={"https://www.iot-ensemble.com/" as const}
              platform={"nextjs"}
              target={"_blank" as const}
            >
              {"IoT Ensemble"}
            </p.PlasmicLink>

            <p.PlasmicLink
              data-plasmic-name={"httpswwwhabistackcom"}
              data-plasmic-override={overrides.httpswwwhabistackcom}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.httpswwwhabistackcom
              )}
              component={Link}
              href={"https://www.habistack.com/" as const}
              platform={"nextjs"}
              target={"_blank" as const}
            >
              {"Habistack"}
            </p.PlasmicLink>

            {true ? (
              <p.PlasmicLink
                data-plasmic-name={"httpswwwproadjectcom"}
                data-plasmic-override={overrides.httpswwwproadjectcom}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.httpswwwproadjectcom
                )}
                component={Link}
                href={"https://www.proadject.com/" as const}
                platform={"nextjs"}
                target={"_blank" as const}
              >
                {"pROADject"}
              </p.PlasmicLink>
            ) : null}
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ftRb)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__pdqAb
              )}
            >
              {"Resources"}
            </div>

            <p.PlasmicLink
              data-plasmic-name={"httpswwwfathymcomdocs"}
              data-plasmic-override={overrides.httpswwwfathymcomdocs}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.httpswwwfathymcomdocs
              )}
              component={Link}
              href={"" as const}
              platform={"nextjs"}
              target={"_blank" as const}
            >
              {"Docs"}
            </p.PlasmicLink>

            <p.PlasmicLink
              data-plasmic-name={"httpswwwfathymcomblog"}
              data-plasmic-override={overrides.httpswwwfathymcomblog}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.httpswwwfathymcomblog
              )}
              component={Link}
              href={"" as const}
              platform={"nextjs"}
              target={"_blank" as const}
            >
              {"Blog"}
            </p.PlasmicLink>

            <p.PlasmicLink
              data-plasmic-name={"mailtosupportfathymcom"}
              data-plasmic-override={overrides.mailtosupportfathymcom}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.mailtosupportfathymcom
              )}
              component={Link}
              href={"mailto:support@fathym.com" as const}
              platform={"nextjs"}
              target={"_blank" as const}
            >
              {"Support"}
            </p.PlasmicLink>
          </p.Stack>

          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__ocmHf)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__wcvpl
              )}
            >
              {"Company"}
            </div>

            <p.PlasmicLink
              data-plasmic-name={"enterpriseAgreement"}
              data-plasmic-override={overrides.enterpriseAgreement}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.enterpriseAgreement
              )}
              component={Link}
              platform={"nextjs"}
              target={undefined}
            >
              {"Enterprise Agreement"}
            </p.PlasmicLink>

            <p.PlasmicLink
              data-plasmic-name={"termsOfService"}
              data-plasmic-override={overrides.termsOfService}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.termsOfService
              )}
              component={Link}
              platform={"nextjs"}
              target={undefined}
            >
              {"Terms of Services"}
            </p.PlasmicLink>

            <p.PlasmicLink
              data-plasmic-name={"privacyPolicy"}
              data-plasmic-override={overrides.privacyPolicy}
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.privacyPolicy
              )}
              component={Link}
              platform={"nextjs"}
              target={undefined}
            >
              {"Privacy Policy"}
            </p.PlasmicLink>
          </p.Stack>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___6OxMa)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yxyAo
                )}
              >
                {"Subscribe"}
              </div>

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__iptWl
                )}
              >
                {"Get the latest news and articles to your inbox every month."}
              </div>

              <TextInput2
                data-plasmic-name={"textInput2"}
                data-plasmic-override={overrides.textInput2}
                className={classNames("__wab_instance", sty.textInput2)}
                endIcon={
                  <Button2
                    data-plasmic-name={"button2"}
                    data-plasmic-override={overrides.button2}
                    className={classNames("__wab_instance", sty.button2)}
                    color={"clear" as const}
                    size={"compact" as const}
                    startIcon={
                      <IconIcon
                        className={classNames(projectcss.all, sty.svg__gqiFw)}
                        role={"img"}
                      />
                    }
                  >
                    <IconIcon
                      className={classNames(projectcss.all, sty.svg__dj2QN)}
                      role={"img"}
                    />
                  </Button2>
                }
                fontSize={"small" as const}
                placeholder={"Your email" as const}
                showEndIcon={true}
              />
            </p.Stack>
          ) : null}
        </p.Stack>
      </p.Stack>

      <div className={classNames(projectcss.all, sty.freeBox__u0OZ)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__eoQwf)}
      >
        <div className={classNames(projectcss.all, sty.freeBox__ii129)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__tipdp
            )}
          >
            {"Copyright "}
          </div>

          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__jDcIn)}
            displayHeight={"auto" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/azure_landing_page_project/images/copyrightIcon.png",
              fullWidth: 24,
              fullHeight: 24,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___5LMiE
            )}
          >
            {" 2022 Fathym. All rights reserved."}
          </div>
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__fbtC)}
        >
          <IconLink
            data-plasmic-name={"fathymIt"}
            data-plasmic-override={overrides.fathymIt}
            className={classNames("__wab_instance", sty.fathymIt)}
            icon={
              <TwitterIconIcon
                data-plasmic-name={"httpstwittercomFathymIt"}
                data-plasmic-override={overrides.httpstwittercomFathymIt}
                className={classNames(
                  projectcss.all,
                  sty.httpstwittercomFathymIt
                )}
                role={"img"}
              />
            }
          />

          <IconLink
            data-plasmic-name={"httpsgithubcomfathym"}
            data-plasmic-override={overrides.httpsgithubcomfathym}
            className={classNames("__wab_instance", sty.httpsgithubcomfathym)}
            icon={
              <GithubIconIcon
                data-plasmic-name={"gitHub"}
                data-plasmic-override={overrides.gitHub}
                className={classNames(projectcss.all, sty.gitHub)}
                role={"img"}
              />
            }
          />

          <IconLink
            data-plasmic-name={"httpswwwfacebookcomFathymInc"}
            data-plasmic-override={overrides.httpswwwfacebookcomFathymInc}
            className={classNames(
              "__wab_instance",
              sty.httpswwwfacebookcomFathymInc
            )}
            icon={
              <FacebookIconIcon
                data-plasmic-name={"facebook"}
                data-plasmic-override={overrides.facebook}
                className={classNames(projectcss.all, sty.facebook)}
                role={"img"}
              />
            }
          />
        </p.Stack>
      </p.Stack>
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "httpswwwfathymcom",
    "httpswwwiotEnsemblecom",
    "httpswwwhabistackcom",
    "httpswwwproadjectcom",
    "httpswwwfathymcomdocs",
    "httpswwwfathymcomblog",
    "mailtosupportfathymcom",
    "enterpriseAgreement",
    "termsOfService",
    "privacyPolicy",
    "textInput2",
    "button2",
    "fathymIt",
    "httpstwittercomFathymIt",
    "httpsgithubcomfathym",
    "gitHub",
    "httpswwwfacebookcomFathymInc",
    "facebook"
  ],
  httpswwwfathymcom: ["httpswwwfathymcom"],
  httpswwwiotEnsemblecom: ["httpswwwiotEnsemblecom"],
  httpswwwhabistackcom: ["httpswwwhabistackcom"],
  httpswwwproadjectcom: ["httpswwwproadjectcom"],
  httpswwwfathymcomdocs: ["httpswwwfathymcomdocs"],
  httpswwwfathymcomblog: ["httpswwwfathymcomblog"],
  mailtosupportfathymcom: ["mailtosupportfathymcom"],
  enterpriseAgreement: ["enterpriseAgreement"],
  termsOfService: ["termsOfService"],
  privacyPolicy: ["privacyPolicy"],
  textInput2: ["textInput2", "button2"],
  button2: ["button2"],
  fathymIt: ["fathymIt", "httpstwittercomFathymIt"],
  httpstwittercomFathymIt: ["httpstwittercomFathymIt"],
  httpsgithubcomfathym: ["httpsgithubcomfathym", "gitHub"],
  gitHub: ["gitHub"],
  httpswwwfacebookcomFathymInc: ["httpswwwfacebookcomFathymInc", "facebook"],
  facebook: ["facebook"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  httpswwwfathymcom: "a";
  httpswwwiotEnsemblecom: "a";
  httpswwwhabistackcom: "a";
  httpswwwproadjectcom: "a";
  httpswwwfathymcomdocs: "a";
  httpswwwfathymcomblog: "a";
  mailtosupportfathymcom: "a";
  enterpriseAgreement: "a";
  termsOfService: "a";
  privacyPolicy: "a";
  textInput2: typeof TextInput2;
  button2: typeof Button2;
  fathymIt: typeof IconLink;
  httpstwittercomFathymIt: "svg";
  httpsgithubcomfathym: typeof IconLink;
  gitHub: "svg";
  httpswwwfacebookcomFathymInc: typeof IconLink;
  facebook: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFooter__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFooter__VariantsArgs;
    args?: PlasmicFooter__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFooter__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFooter__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFooter__ArgProps,
          internalVariantPropNames: PlasmicFooter__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFooter";
  } else {
    func.displayName = `PlasmicFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFooter = Object.assign(
  // Top-level PlasmicFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    httpswwwfathymcom: makeNodeComponent("httpswwwfathymcom"),
    httpswwwiotEnsemblecom: makeNodeComponent("httpswwwiotEnsemblecom"),
    httpswwwhabistackcom: makeNodeComponent("httpswwwhabistackcom"),
    httpswwwproadjectcom: makeNodeComponent("httpswwwproadjectcom"),
    httpswwwfathymcomdocs: makeNodeComponent("httpswwwfathymcomdocs"),
    httpswwwfathymcomblog: makeNodeComponent("httpswwwfathymcomblog"),
    mailtosupportfathymcom: makeNodeComponent("mailtosupportfathymcom"),
    enterpriseAgreement: makeNodeComponent("enterpriseAgreement"),
    termsOfService: makeNodeComponent("termsOfService"),
    privacyPolicy: makeNodeComponent("privacyPolicy"),
    textInput2: makeNodeComponent("textInput2"),
    button2: makeNodeComponent("button2"),
    fathymIt: makeNodeComponent("fathymIt"),
    httpstwittercomFathymIt: makeNodeComponent("httpstwittercomFathymIt"),
    httpsgithubcomfathym: makeNodeComponent("httpsgithubcomfathym"),
    gitHub: makeNodeComponent("gitHub"),
    httpswwwfacebookcomFathymInc: makeNodeComponent(
      "httpswwwfacebookcomFathymInc"
    ),
    facebook: makeNodeComponent("facebook"),

    // Metadata about props expected for PlasmicFooter
    internalVariantProps: PlasmicFooter__VariantProps,
    internalArgProps: PlasmicFooter__ArgProps
  }
);

export default PlasmicFooter;
/* prettier-ignore-end */
