// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: sjVjhDwAwAnzPPjTJm6wuM
// Component: waiFWKvXT1xoLh
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: P-H-3Rnl6IFnul/component

import { useScreenVariants as useScreenVariantspCqVwGHbhXBxmj } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: pCQVwGHbhXBxmj/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_azure_landing_page_project.module.css"; // plasmic-import: sjVjhDwAwAnzPPjTJm6wuM/projectcss
import sty from "./PlasmicGetStartedForFreeButton.module.css"; // plasmic-import: waiFWKvXT1xoLh/css

import AppleIcon from "./icons/PlasmicIcon__Apple"; // plasmic-import: EI-h-RaqbBFLXd/icon
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: MEgNJoesY0EYmh/icon

export type PlasmicGetStartedForFreeButton__VariantMembers = {};

export type PlasmicGetStartedForFreeButton__VariantsArgs = {};
type VariantPropType = keyof PlasmicGetStartedForFreeButton__VariantsArgs;
export const PlasmicGetStartedForFreeButton__VariantProps =
  new Array<VariantPropType>();

export type PlasmicGetStartedForFreeButton__ArgsType = {};
type ArgPropType = keyof PlasmicGetStartedForFreeButton__ArgsType;
export const PlasmicGetStartedForFreeButton__ArgProps =
  new Array<ArgPropType>();

export type PlasmicGetStartedForFreeButton__OverridesType = {
  root?: p.Flex<typeof Button>;
  text?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultGetStartedForFreeButtonProps {
  className?: string;
}

function PlasmicGetStartedForFreeButton__RenderFunc(props: {
  variants: PlasmicGetStartedForFreeButton__VariantsArgs;
  args: PlasmicGetStartedForFreeButton__ArgsType;
  overrides: PlasmicGetStartedForFreeButton__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantspCqVwGHbhXBxmj()
  });

  return (
    <Button
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames("__wab_instance", sty.root)}
      color={
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? ("blue" as const)
          : ("blue" as const)
      }
      endIcon={
        <ChevronRightIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          className={classNames(projectcss.all, sty.svg)}
          role={"img"}
        />
      }
      link={
        hasVariant(globalVariants, "screen", "mobileOnly")
          ? ("/dashboard/create-project" as const)
          : ("/dashboard" as const)
      }
      showEndIcon={
        hasVariant(globalVariants, "screen", "mobileOnly") ? true : true
      }
    >
      <div
        data-plasmic-name={"text"}
        data-plasmic-override={overrides.text}
        className={classNames(projectcss.all, projectcss.__wab_text, sty.text)}
      >
        {"Get Started for Free"}
      </div>
    </Button>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "svg"],
  text: ["text"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: typeof Button;
  text: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicGetStartedForFreeButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicGetStartedForFreeButton__VariantsArgs;
    args?: PlasmicGetStartedForFreeButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicGetStartedForFreeButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicGetStartedForFreeButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicGetStartedForFreeButton__ArgProps,
          internalVariantPropNames: PlasmicGetStartedForFreeButton__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicGetStartedForFreeButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicGetStartedForFreeButton";
  } else {
    func.displayName = `PlasmicGetStartedForFreeButton.${nodeName}`;
  }
  return func;
}

export const PlasmicGetStartedForFreeButton = Object.assign(
  // Top-level PlasmicGetStartedForFreeButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicGetStartedForFreeButton
    internalVariantProps: PlasmicGetStartedForFreeButton__VariantProps,
    internalArgProps: PlasmicGetStartedForFreeButton__ArgProps
  }
);

export default PlasmicGetStartedForFreeButton;
/* prettier-ignore-end */
